{"version":3,"file":"vallaris-js.mjs","sources":["../src/visual/layer.ts","../src/visual/group.ts","../src/config/fetch.ts","../src/features/get.ts","../src/features/create.ts","../src/features/update.ts","../src/features/delete.ts","../src/features/index.ts","../src/styles/get.ts","../src/styles/index.ts","../src/config/initial.ts"],"sourcesContent":["import { get } from 'dot-prop-immutable'\nimport { SelectLayer } from '../types';\nimport { SelectLayerId } from '../types/layer';\n\nconst select = ({ styles, ids }: SelectLayerId) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        if (ids.includes(l.id)) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\nconst selectWithMetadata = ({ styles, metadataKey }: SelectLayer) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        const newMetadata = get(l, \"metadata\")\n            ? Object.keys(get(l, \"metadata\")).filter((mt) => mt === metadataKey)\n            : [];\n\n        if (newMetadata.length) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\n\nconst layers = {\n    select,\n    selectWithMetadata\n}\n\nexport { layers }","import { set } from 'dot-prop-immutable';\nimport { RenderGroup, VisibleGroup, ReturnGroup } from '../types';\n\n\nconst visibility = ({ map, groupId, type, options }: VisibleGroup) => {\n    const key = options?.groupKey ? options.groupKey : \"vallaris:group\";\n    const styles = map.getStyle()\n    const { layers } = styles\n    let newLayers: any[] = [];\n\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i]\n        if (layer.metadata && layer.metadata[key] && layer.metadata[key] === groupId) {\n            let input = { ...layer };\n            const newInput = set(input, \"layout.visibility\", type);\n\n            newLayers.push(newInput);\n\n            map.setLayoutProperty(layer.id, 'visibility', type)\n        } else {\n            newLayers.push(layer);\n\n            if (options?.onlyGroup && type === 'visible') map.setLayoutProperty(layer.id, 'visibility', 'none')\n        }\n    }\n\n    if (options?.returnStyle) {\n        let newStyle = { ...styles };\n        newStyle.layers = newLayers;\n\n        return newStyle;\n    }\n\n}\n\n\nconst get = ({ styles, groupIds, options }: RenderGroup) => {\n    const key = options?.groupKey ? options.groupKey : \"vallaris:group\";\n    let groups: ReturnGroup[] = [];\n    const { layers } = styles;\n\n    const filterLayers = layers.filter(\n        (l: any) =>\n            l.metadata && l.metadata[key] && groupIds.includes(l.metadata[key])\n    );\n\n    filterLayers.map((l: any) => {\n        if (groups.filter((g) => g.groupId === l.metadata[key]).length) {\n            const index = groups.map((g) => g.groupId).indexOf(l.metadata[key]);\n            groups[index].layers.push(l);\n        } else {\n            let input = { groupId: l.metadata[key], layers: [l] };\n            groups.push(input);\n        }\n    });\n\n    return groups;\n};\n\n\nconst group = {\n    get,\n    visibility\n}\n\nexport { group }","import { config } from \"./initial\";\n\nconst core = '/core/api';\nconst version = '1.0'\n\n\nconst getFetch = async (url: string, options: RequestInit) => {\n    return await fetch(url, {\n        ...options,\n        \"headers\": {\n            \"Content-Type\": \"application/json\",\n        }\n    })\n        .then(async (rs) => {\n            return {\n                status: rs.status,\n                response: options.method === 'DELETE' ? null : await rs.json()\n            }\n        })\n        .then(rs => rs)\n        .catch((err) => {\n            return {\n                status: 500,\n                response: err\n            }\n        });\n}\n\nconst covertParamToString = (params: Object) => {\n    return params\n        ? Object.keys(params)\n            .map(\n                (op, index) =>\n                    `${index === 0 ? \"?\" : \"&\"}${op}=${params[op]}`\n            )\n            .join(\"\")\n        : \"\"\n}\n\nconst parseURL = (type: \"collections\" | \"items\" | \"profile\" | \"styles\", method: RequestInit['method'], params?: any, ids?: {\n    collectionId?: string\n    featureId?: string\n    metadata?: boolean\n}) => {\n    const url = config.host\n    const api_key = `api_key=${config.apiKey}`\n    const withParams = params ? `${covertParamToString(params)}&${api_key}` : `?${api_key}`\n    switch (type) {\n        case 'collections':\n            switch (method) {\n                case 'POST':\n                    return `${url}${core}/features/${version}/collections?${api_key}`\n                default:\n                    if (ids.collectionId) return `${url}${core}/features/${version}/collections/${ids.collectionId}?${api_key}`\n                    return `${url}${core}/features/${version}/collections${withParams}`\n            }\n        case 'items':\n            switch (method) {\n                case 'POST':\n                    return `${url}${core}/features/${version}/collections/${ids.collectionId}/items?${api_key}`\n                default:\n                    if (ids.featureId) return `${url}${core}/features/${version}/collections/${ids.collectionId}/items/${ids.featureId}?${api_key}`\n                    return `${url}${core}/features/${version}/collections/${ids.collectionId}/items${withParams}`\n            }\n        case 'profile':\n            return `${url}${core}/managements/${version}/account/profile?${api_key}`\n        case 'styles':\n            switch (method) {\n                case 'POST':\n                    return `${url}${core}/styles/${version}-beta/styles?${api_key}`\n                default:\n                    if (ids.collectionId) return `${url}${core}/styles/${version}-beta/styles/${ids.collectionId}?${api_key}`\n                    if (ids.metadata && ids.collectionId) return `${url}${core}/styles/${version}-beta/styles/${ids.collectionId}/metadata?${api_key}`\n                    return `${url}${core}/styles/${version}-beta/styles/${ids.collectionId}${withParams}`\n            }\n        default:\n            return `${url}`\n    }\n}\n\nexport { getFetch, parseURL }","import { getFetch, parseURL } from \"../config/fetch\"\nimport { GetCollection, GetFeature } from \"../types/collection\";\n\nconst collections = ({ collectionId, params }: GetCollection) => {\n    const collection = getFetch(parseURL('collections', 'GET', params, { collectionId }), { method: 'GET' });\n    return collection\n}\n\nconst data = ({ collectionId, featureId, params }: GetFeature) => {\n    const data = getFetch(parseURL('items', 'GET', params, { collectionId, featureId }), { method: 'GET' });\n    return data\n}\n\nconst get = {\n    collections,\n    data\n}\n\nexport { get }","import { getFetch, parseURL } from \"../config/fetch\"\nimport { PostCollection, PostFeature } from \"../types/collection\";\n\nconst collections = ({ body }: PostCollection) => {\n    const collection = getFetch(parseURL('collections', 'POST'), { method: 'POST', body: JSON.stringify(body) });\n    return collection\n}\n\nconst data = ({ collectionId, body }: PostFeature) => {\n    const data = getFetch(parseURL('items', 'POST', { collectionId }), { method: 'POST', body: JSON.stringify(body) });\n    return data\n}\n\nconst create = {\n    collections,\n    data\n}\n\nexport { create }","import { getFetch, parseURL } from \"../config/fetch\"\nimport { PutCollection, PutFeature } from \"../types/collection\";\n\nconst collections = ({ collectionId, body }: PutCollection) => {\n    const collection = getFetch(parseURL('collections', 'PUT', body, { collectionId }), { method: 'PUT', body: JSON.stringify(body) });\n    return collection\n}\n\nconst data = ({ collectionId, featureId, body }: PutFeature) => {\n    const data = getFetch(parseURL('items', 'PUT', body, { collectionId, featureId }), { method: 'PUT', body: JSON.stringify(body) });\n    return data\n}\n\nconst update = {\n    collections,\n    data\n}\n\nexport { update }","import { getFetch, parseURL } from \"../config/fetch\"\nimport { GetCollection, GetFeature } from \"../types/collection\";\n\nconst collections = ({ collectionId, params }: GetCollection) => {\n    const collection = getFetch(parseURL('collections', 'DELETE', params, { collectionId }), { method: 'DELETE' });\n    return collection\n}\n\nconst data = ({ collectionId, featureId, params }: GetFeature) => {\n    const data = getFetch(parseURL('items', 'DELETE', params, { collectionId, featureId }), { method: 'DELETE' });\n    return data\n}\n\nconst remove = {\n    collections,\n    data\n}\n\nexport { remove }","\nimport { get } from './get'\nimport { create } from './create';\nimport { update } from './update';\nimport { remove } from './delete'\n\nconst features = {\n    create,\n    get,\n    update,\n    remove\n}\n\nexport { features } ","import { getFetch, parseURL } from \"../config/fetch\";\nimport { GetStyle } from \"../types/style\";\n\n\nconst get = ({ styleId, params, metadata }: GetStyle) => {\n    const data = getFetch(parseURL('styles', 'GET', params, { collectionId: styleId, metadata }), { method: 'GET' });\n    return data\n}\n\nexport { get }","import { get } from './get';\n\nconst styles = {\n    get\n}\n\nexport { styles }","\nimport { features } from '../features'\nimport { styles } from '../styles';\nimport { getFetch, parseURL } from './fetch';\n\nconst defaultHOST = \"https://cloud.vallarismaps.com\";\n\ninterface InitialProps {\n    apiKey: string;\n    host?: string;\n}\n\nvar config: InitialProps = {\n    apiKey: \"\",\n    host: \"\",\n};\n\nclass Initial {\n    features = features\n    styles = styles\n    constructor(source: InitialProps) {\n        config.host = source.host ? source.host : defaultHOST;\n        if (source.apiKey) {\n\n            config.apiKey = source.apiKey;\n\n            const profile = getFetch(parseURL('profile', 'GET'), { method: 'GET' });\n\n            profile.then(rs => {\n                if (rs.status === 200) {\n                    this.features = features\n                    this.styles = styles\n                } else {\n                    this.features = null;\n                    this.styles = null\n                }\n            })\n        } else {\n            this.features = null\n        }\n    }\n}\n\nexport { config }\n\nexport default Initial\n"],"names":["layers","get","__spreadValues","collections","data"],"mappings":"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"}