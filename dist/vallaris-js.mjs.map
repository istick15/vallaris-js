{"version":3,"file":"vallaris-js.mjs","sources":["../src/visual/layer.ts","../src/config/initial.ts"],"sourcesContent":["import { set, get } from 'dot-prop-immutable'\n\n\ninterface IVisibleGroup {\n    map: any;\n    groupId: string;\n    type: \"visible\" | \"none\";\n    options?: {\n        groupKey?: string;\n        onlyGroup?: boolean;\n        returnStyle?: boolean\n    }\n}\n\ninterface IRenderGroup {\n    styles: any;\n    groupIds: string[]\n    options?: {\n        groupKey?: string;\n    }\n}\n\ninterface IRenderLayer {\n    styles: any;\n    metadataKey: string\n}\n\ninterface ISelectLayers {\n    styles: any;\n    args: string[]\n}\n\nconst visibleGroup = ({ map, groupId, type, options }: IVisibleGroup) => {\n    const { groupKey, onlyGroup, returnStyle } = options;\n    const key = groupKey ? groupKey : \"vallaris:group\";\n    const styles = map.getStyle()\n    const { layers } = styles\n    let newLayers: any[] = [];\n\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i]\n        if (layer.metadata && layer.metadata[key] && layer.metadata[key] === groupId) {\n            let input = { ...layer };\n            const newInput = set(input, \"layout.visibility\", type);\n\n            newLayers.push(newInput);\n\n            map.setLayoutProperty(layer.id, 'visibility', type)\n        } else {\n            newLayers.push(layer);\n\n            if (onlyGroup && type === 'visible') map.setLayoutProperty(layer.id, 'visibility', 'none')\n        }\n    }\n\n    if (returnStyle) {\n        let newStyle = { ...styles };\n        newStyle.layers = newLayers;\n\n        return newStyle;\n    }\n\n}\n\nconst renderGroup = ({ styles, groupIds, options }: IRenderGroup) => {\n    const { groupKey } = options\n    const key = groupKey ? groupKey : \"vallaris:group\";\n    let groups: any = [];\n    const { layers } = styles\n\n    const filterLayers = layers.filter(\n        (l: any) => l.metadata && l.metadata[key] && groupIds.includes(l.metadata[key])\n    );\n\n    filterLayers.map((l: any) => {\n        const layers = renderLayers({ styles: styles, metadataKey: l.metadata[key] });\n        let input = { groupId: l.metadata[key], layers: layers };\n        groups.push(input);\n    });\n\n    return groups;\n}\n\nconst selectLayers = ({ styles, args }: ISelectLayers) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        if (args.includes(l.id)) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\nconst renderLayers = ({ styles, metadataKey }: IRenderLayer) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        const newMetadata = get(l, \"metadata\")\n            ? Object.keys(get(l, \"metadata\")).filter((mt) => mt === metadataKey)\n            : [];\n\n        if (newMetadata.length) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\nexport { visibleGroup, renderGroup, selectLayers, renderLayers }","const defaultHOST = \"https://cloud.vallarismaps.com\";\n\ninterface InitialProps {\n    apiKey: string;\n    host?: string;\n}\n\nvar config: InitialProps;\n\nconst initial = ({ host, apiKey }: InitialProps) => {\n    config.host = host ? host : defaultHOST;\n\n    if (config.apiKey) {\n        config.apiKey = apiKey;\n    } else {\n        throw new Error(\"API Key is require please check in management > API Key\");\n    }\n\n};\n\nexport { initial, config };\n"],"names":["layers"],"mappings":"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"}