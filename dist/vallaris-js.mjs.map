{"version":3,"file":"vallaris-js.mjs","sources":["../src/visual/layer.ts","../src/visual/group.ts","../src/config/initial.ts"],"sourcesContent":["import { get } from 'dot-prop-immutable'\nimport { SelectLayer } from '../types';\nimport { SelectLayerId } from '../types/layer';\n\nconst select = ({ styles, ids }: SelectLayerId) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        if (ids.includes(l.id)) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\nconst selectWithMetadata = ({ styles, metadataKey }: SelectLayer) => {\n    const { layers } = styles;\n\n    let newRender: any[] = [];\n\n    layers.map((l: any) => {\n        const newMetadata = get(l, \"metadata\")\n            ? Object.keys(get(l, \"metadata\")).filter((mt) => mt === metadataKey)\n            : [];\n\n        if (newMetadata.length) {\n            newRender.push(l);\n        }\n    });\n\n    return newRender;\n}\n\n\nconst layers = {\n    select,\n    selectWithMetadata\n}\n\nexport { layers }","import { set } from 'dot-prop-immutable';\nimport { RenderGroup, VisibleGroup, ReturnGroup } from '../types';\n\n\nconst visibility = ({ map, groupId, type, options }: VisibleGroup) => {\n    const key = options?.groupKey ? options.groupKey : \"vallaris:group\";\n    const styles = map.getStyle()\n    const { layers } = styles\n    let newLayers: any[] = [];\n\n    for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i]\n        if (layer.metadata && layer.metadata[key] && layer.metadata[key] === groupId) {\n            let input = { ...layer };\n            const newInput = set(input, \"layout.visibility\", type);\n\n            newLayers.push(newInput);\n\n            map.setLayoutProperty(layer.id, 'visibility', type)\n        } else {\n            newLayers.push(layer);\n\n            if (options?.onlyGroup && type === 'visible') map.setLayoutProperty(layer.id, 'visibility', 'none')\n        }\n    }\n\n    if (options?.returnStyle) {\n        let newStyle = { ...styles };\n        newStyle.layers = newLayers;\n\n        return newStyle;\n    }\n\n}\n\n\nconst get = ({ styles, groupIds, options }: RenderGroup) => {\n    const key = options?.groupKey ? options.groupKey : \"vallaris:group\";\n    let groups: ReturnGroup[] = [];\n    const { layers } = styles;\n\n    const filterLayers = layers.filter(\n        (l: any) =>\n            l.metadata && l.metadata[key] && groupIds.includes(l.metadata[key])\n    );\n\n    filterLayers.map((l: any) => {\n        if (groups.filter((g) => g.groupId === l.metadata[key]).length) {\n            const index = groups.map((g) => g.groupId).indexOf(l.metadata[key]);\n            groups[index].layers.push(l);\n        } else {\n            let input = { groupId: l.metadata[key], layers: [l] };\n            groups.push(input);\n        }\n    });\n\n    return groups;\n};\n\n\nconst group = {\n    get,\n    visibility\n}\n\nexport { group }","const defaultHOST = \"https://cloud.vallarismaps.com\";\n\ninterface InitialProps {\n    apiKey: string;\n    host?: string;\n}\n\nvar config: InitialProps;\n\nconst initial = ({ host, apiKey }: InitialProps) => {\n    config.host = host ? host : defaultHOST;\n\n    if (config.apiKey) {\n        config.apiKey = apiKey;\n    } else {\n        throw new Error(\"API Key is require please check in management > API Key\");\n    }\n\n};\n\nexport { initial, config };\n"],"names":["layers","get"],"mappings":"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"}